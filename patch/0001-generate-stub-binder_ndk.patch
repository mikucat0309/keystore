From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mikucat <git@mikucat.me>
Date: Mon, 17 Sep 2001 00:00:00 +0000
Subject: [PATCH] generate stub binder_ndk

---
 libs/binder/rust/build.rs     |  2 +-
 libs/binder/rust/sys/build.rs | 63 +++++++++++++++++++++++++++++++++++
 2 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/libs/binder/rust/build.rs b/libs/binder/rust/build.rs
index f3e6b53778..934b0e9be7 100644
--- a/libs/binder/rust/build.rs
+++ b/libs/binder/rust/build.rs
@@ -1,4 +1,4 @@
 fn main() {
     // Anything with cargo is NDK only. If you want to access anything else, use Soong.
-    println!("cargo::rustc-cfg=android_ndk");
+    println!("cargo::rustc-cfg=android_vndk");
 }
diff --git a/libs/binder/rust/sys/build.rs b/libs/binder/rust/sys/build.rs
index cb9c65ba51..0cd784903a 100644
--- a/libs/binder/rust/sys/build.rs
+++ b/libs/binder/rust/sys/build.rs
@@ -15,6 +15,7 @@
  */
 
 use std::env;
+use std::io::Write;
 use std::path::PathBuf;
 
 fn main() {
@@ -56,4 +57,66 @@ fn main() {
     let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
     bindings.write_to_file(out_path.join("bindings.rs")).expect("Couldn't write bindings.");
     println!("cargo::rustc-link-lib=binder_ndk");
+    gen_stub(&bindings).expect("Failed to build stub binder_ndk.so");
+}
+
+const CARGO_CONTENT: &str = r#"
+[package]
+name = "binder_ndk"
+version = "0.1.0"
+edition = "2024"
+
+[lib]
+path = "lib.rs"
+crate-type = ["cdylib"]
+
+[workspace]
+"#;
+
+fn gen_stub(binding: &bindgen::Bindings) -> Result<(), Box<dyn std::error::Error>> {
+    let out_dir = env::var("OUT_DIR")?;
+    let target = env::var("TARGET")?;
+
+    let mut buf = Vec::new();
+    binding.write(Box::new(&mut buf))?;
+    let raw = String::from_utf8(buf)?;
+    let functions: Vec<String> = raw
+        .split("\n")
+        .filter(|x| x.starts_with("    pub fn "))
+        .filter_map(|x| x.split_once("("))
+        .map(|x| x.0)
+        .map(|x| x.replacen("pub fn", "pub extern \"C\" fn", 1))
+        .collect();
+
+    let out_path = &PathBuf::from(&out_dir);
+    let project_path = &out_path.join("libbinder_ndk");
+    std::fs::create_dir_all(&project_path)?;
+
+    let cargo_path = &project_path.join("Cargo.toml");
+    let lib_path = &project_path.join("lib.rs");
+    std::fs::write(cargo_path, CARGO_CONTENT)?;
+
+    let mut file = std::fs::File::create(lib_path)?;
+    for function in functions {
+        file.write_all(b"#[unsafe(no_mangle)]\n")?;
+        file.write_fmt(format_args!("{function}() {{}}\n"))?;
+    }
+    file.flush()?;
+
+    std::process::Command::new("cargo")
+        .arg("build")
+        .arg("--target")
+        .arg(&target)
+        .arg("--manifest-path")
+        .arg(cargo_path)
+        .arg("--target-dir")
+        .arg(out_path)
+        .current_dir(project_path)
+        .status()?;
+
+    println!(
+        "cargo:rustc-link-search={}/{}/{}",
+        &out_dir, &target, "debug"
+    );
+    Ok(())
 }
-- 
2.49.0

